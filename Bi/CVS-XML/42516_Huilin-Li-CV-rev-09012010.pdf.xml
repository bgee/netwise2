<?xml version="1.0" encoding="UTF-8"?>
<!--  [xml content created: 3-12-2013 @ 16:05:34 EDT] -->
<Results>
<HireAbilityXMLResults id="2914131306521"  usageLimitType="allocation" usageLimit="200" currentUsage="117" remainingUsage="83" accountValidThrough="03-18-2013">
<Resume xml:lang="EN" xmlns="http://ns.hr-xml.org/2007-04-15" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://ns.hr-xml.org/2_5/HR-XML-2_5/SEP/Resume.xsd">
<ResumeId>
<IdValue></IdValue>
</ResumeId>
<StructuredXMLResume>
<ContactInfo>
<PersonName>
<FormattedName>Huilin Li</FormattedName>
<GivenName>Huilin</GivenName>
<FamilyName>Li</FamilyName>
</PersonName>
<ContactMethod>
<PostalAddress>
<CountryCode>US</CountryCode>
<PostalCode>11764</PostalCode>
<Region>NY</Region>
<Municipality>Miller Place</Municipality>
<DeliveryAddress>
<AddressLine>329 Parkside Ave</AddressLine>
</DeliveryAddress>
</PostalAddress>
</ContactMethod>
<ContactMethod>
<Use>personal</Use>
<Location>home</Location>
<WhenAvailable>unknown</WhenAvailable>
<Telephone>
<FormattedNumber>+12003-2006</FormattedNumber>
<InternationalCountryCode>1</InternationalCountryCode>
<AreaCityCode></AreaCityCode>
<SubscriberNumber>2003-2006</SubscriberNumber>
</Telephone>
</ContactMethod>
</ContactInfo>
<EmploymentHistory>
<EmployerOrg>
<EmployerOrgName>Lawrence Berkeley National</EmployerOrgName>
<PositionHistory>
<Title>Assistant Scientist</Title>
<OrgName>
<OrganizationName></OrganizationName>
</OrgName>
<OrgInfo>
<PositionLocation>
<CountryCode>US</CountryCode>
<Region>CA</Region>
<Municipality>Laboratory</Municipality>
</PositionLocation>
</OrgInfo>
<OrgIndustry primaryIndicator="true"><IndustryDescription>scientific</IndustryDescription></OrgIndustry>
<Description>Life Science Division
</Description>
<StartDate>
<AnyDate>1998-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2002-01-01</AnyDate>
</EndDate>
</PositionHistory>
</EmployerOrg>
<EmployerOrg>
<EmployerOrgName>Brookhaven National Laboratory</EmployerOrgName>
<PositionHistory>
<Title>Associate Biophysicist, Biology Department</Title>
<OrgName>
<OrganizationName></OrganizationName>
</OrgName>
<OrgInfo>
<PositionLocation>
<CountryCode>UN</CountryCode>
<Region>USA</Region>
<Municipality>NY</Municipality>
</PositionLocation>
</OrgInfo>
<Description>
</Description>
<StartDate>
<AnyDate>2002-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2005-01-01</AnyDate>
</EndDate>
</PositionHistory>
</EmployerOrg>
<EmployerOrg>
<EmployerOrgName>Biophysicist</EmployerOrgName>
<PositionHistory>
<Title>Brookhaven National Laboratory</Title>
<OrgName>
<OrganizationName></OrganizationName>
</OrgName>
<Description>Biology Department
</Description>
<StartDate>
<AnyDate>2005-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2008-01-01</AnyDate>
</EndDate>
</PositionHistory>
</EmployerOrg>
<EmployerOrg>
<EmployerOrgName>Biology Department</EmployerOrgName>
<PositionHistory>
<Title>Brookhaven National Laboratory</Title>
<OrgName>
<OrganizationName></OrganizationName>
</OrgName>
<Description>Brookhaven National Laboratory Biophysicist with tenure
</Description>
<StartDate>
<AnyDate>2008-01-01</AnyDate>
</StartDate>
</PositionHistory>
</EmployerOrg>
<EmployerOrg>
<EmployerOrgName>Stony Brook University</EmployerOrgName>
<PositionHistory>
<Title>Visiting Professor, Department of Biochemistry and</Title>
<OrgName>
<OrganizationName></OrganizationName>
</OrgName>
<OrgIndustry primaryIndicator="true"><IndustryDescription>academia</IndustryDescription></OrgIndustry>
<Description>Brookhaven National Laboratory Visiting Professor, Department of Biochemistry and
</Description>
<StartDate>
<AnyDate>2007-01-01</AnyDate>
</StartDate>
</PositionHistory>
</EmployerOrg>
<EmployerOrg>
<EmployerOrgName>Microscopy Society of America</EmployerOrgName>
<PositionHistory>
<Title>Cell Biology</Title>
<OrgName>
<OrganizationName></OrganizationName>
</OrgName>
<Description>
</Description>
<StartDate>
<AnyDate>2007-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2007-01-01</AnyDate>
</EndDate>
</PositionHistory>
</EmployerOrg>
<EmployerOrg>
<EmployerOrgName>Biophysical Society</EmployerOrgName>
<PositionHistory>
<Title>PROFESSIONAL AND HONOR SOCIETIES</Title>
<OrgName>
<OrganizationName></OrganizationName>
</OrgName>
<Description>Member, Brookhaven Lecture committee
</Description>
<StartDate>
<AnyDate>2007-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2007-01-01</AnyDate>
</EndDate>
</PositionHistory>
</EmployerOrg>
</EmploymentHistory>
<EducationHistory>
<SchoolOrInstitution schoolType="university">
<School>
<SchoolName>Wuhan University</SchoolName>
</School>
<Degree degreeType="bachelors">
<DegreeName>B.S</DegreeName>
<DegreeDate>
<AnyDate>1987-01-01</AnyDate>
</DegreeDate>
<DegreeMajor>
<Name>Physics</Name>
</DegreeMajor>
</Degree>
</SchoolOrInstitution>
<SchoolOrInstitution schoolType="university">
<School>
<SchoolName>Wuhan University</SchoolName>
</School>
<Degree degreeType="masters">
<DegreeName>M.S</DegreeName>
<DegreeDate>
<AnyDate>1990-01-01</AnyDate>
</DegreeDate>
<DegreeMajor>
<Name>Physics</Name>
</DegreeMajor>
</Degree>
</SchoolOrInstitution>
<SchoolOrInstitution schoolType="university">
<School>
<SchoolName>University of Sci. &amp; Tech.</SchoolName>
</School>
<PostalAddress>
<CountryCode>UN</CountryCode>
<Region>China</Region>
<Municipality>Beijing</Municipality>
</PostalAddress>
<Degree degreeType="doctoral">
<DegreeName>Ph.D</DegreeName>
<DegreeDate>
<AnyDate>1994-01-01</AnyDate>
</DegreeDate>
<DegreeMajor>
<Name>Physicis</Name>
</DegreeMajor>
</Degree>
</SchoolOrInstitution>
<SchoolOrInstitution schoolType="">
<School>
<SchoolName>Science Division Lawrence Berkeley Lab</SchoolName>
</School>
<PostalAddress>
<CountryCode>US</CountryCode>
</PostalAddress>
<Degree degreeType="fellowship">
<DegreeName>Fellowship</DegreeName>
<DegreeDate>
<AnyDate>1998-01-01</AnyDate>
</DegreeDate>
<DegreeMajor>
<Name>Postdoctoral</Name>
</DegreeMajor>
</Degree>
</SchoolOrInstitution>
</EducationHistory>
<PublicationHistory>
<Article>
<Title>Papers 1</Title>
<Name role="author">
<FormattedName>Li H, Zhang YW, Zou HM, and Wang RH. A</FormattedName>
</Name>
<JournalOrSerialName>transmission electron microscopy study of ferroelectric domains in a modified lead zirconate titanate ceramic Journal of Physics</JournalOrSerialName>
</Article>
<Article>
<Title>Thanassi DG</Title>
<Name role="author">
<FormattedName>Books and Reviews</FormattedName>
</Name>
</Article>
<Article>
<Title>autotransporter two-partner secretion and chaperone/usher pathways of gram-negative bacteria</Title>
</Article>
<Article>
<Title>of a combined cryo-EM and X-ray crystallography approach to reveal molecular details of bacterial pilus assembly by the chaperone/usher pathway</Title>
<Name role="author">
<FormattedName>Li H, Thanassi DG. Use</FormattedName>
</Name>
<JournalOrSerialName>Curr Opin in Microbiol</JournalOrSerialName>
<Volume>12</Volume>
<PageNumber>326-</PageNumber>
</Article>
<Article>
<Title>structural elucidation of the Î³-secretase complex</Title>
<Name role="author">
<FormattedName>Li H, Wolfe MS, Selkoe DJ. Toward</FormattedName>
</Name>
<JournalOrSerialName>Structure</JournalOrSerialName>
<Volume>2009</Volume>
<PageNumber>326-334</PageNumber>
</Article>
</PublicationHistory>
<SpeakingEventsHistory>
<SpeakingEvent>
<Title>(INVITED) 1 1997 New England College Henniker NH</Title>
<StartDate><StringDate>1997-01-01</StringDate></StartDate>
<EventName>Gordon Research Conference on 3DEM of Macromolecules</EventName>
<EventType>conference</EventType>
</SpeakingEvent>
</SpeakingEventsHistory>
<Achievements>
<Achievement>
<Date><StringDate>2001-01-01</StringDate></Date>
<Description>Outstanding Performance Award</Description>
<IssuingAuthority>Lawrence Berkeley National Laboratory</IssuingAuthority>
</Achievement>
<Achievement>
<Date><StringDate>2006-01-01</StringDate></Date>
<Description>Outstanding Performance Award Brookhaven National Laboratory</Description>
</Achievement>
<Achievement>
<Description>(1) National Institutes of Health 5R01 GM074985</Description>
</Achievement>
<Achievement>
<Description>Role: PI Direct cost: $175K per year</Description>
</Achievement>
<Achievement>
<Date><StringDate>2006-01-09 - 2011-08-31</StringDate></Date>
<Description>Total</Description>
</Achievement>
</Achievements>
<Associations>
<Association>
<Name>Member of Graduate Program in Biochemistry and Structural Biology</Name>
<StartDate>
<AnyDate>2003-01-01</AnyDate>
</StartDate>
<Role><Name>Member</Name></Role>
</Association>
<Association>
<Name>Member of Brookhaven Lecture Committee</Name>
<StartDate>
<AnyDate>2005-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2010-01-01</AnyDate>
</EndDate>
<Role><Name>Member</Name></Role>
</Association>
<Association>
<Name>Member, Graduate Program in Molecular Genetics and Microbiology</Name>
<StartDate>
<AnyDate>2005-01-01</AnyDate>
</StartDate>
<Role><Name>Member</Name></Role>
</Association>
<Association>
<Name>Stony Brook Graduate School Ph.D.</Name>
</Association>
<Association>
<Name>Candidate China Interview Team</Name>
</Association>
<Association>
<Name>Grant reviewer (mail) for National Science Foundation  Grant reviewer for NIH Macromolecular Structure and Function C study section</Name>
<StartDate>
<AnyDate>2006-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2009-01-01</AnyDate>
</EndDate>
</Association>
<Association>
<Name>Grant reviewer (mail) for Chinese National Science Foundation</Name>
</Association>
<Association>
<Name>2008 - 2009 Grant reviewer (mail) for MRC, UK</Name>
</Association>
<Association>
<Name>Grant reviewer (mail) for National Science Foundation  Grant reviewer for NIH Special Emphasis Group study section (instrumentation)</Name>
<StartDate>
<AnyDate>2009-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2010-01-01</AnyDate>
</EndDate>
</Association>
<Association>
<Name>Member of Search Committee for group leader in CFN, BNL</Name>
<Role><Name>Member</Name></Role>
</Association>
<Association>
<Name>Grant reviewer (mail) for National Science Foundation</Name>
</Association>
<Association>
<Name>2010 Grant reviewer for U.S.</Name>
</Association>
<Association>
<Name>Civilian Research and Development Foundation</Name>
</Association>
<Association>
<Name>COMMITTEES:  Member of Brookhaven Lecture Committee</Name>
<StartDate>
<AnyDate>2005-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2010-01-01</AnyDate>
</EndDate>
<Role><Name>Member</Name></Role>
</Association>
<Association>
<Name>Scientific Staff Review Committee, Biology Department, BNL</Name>
<StartDate>
<AnyDate>2009-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2010-01-01</AnyDate>
</EndDate>
</Association>
<Association>
<Name>DEPARTMENT SERVICES  Scientific Staff Review Committee, Biology Department, BNL</Name>
<StartDate>
<AnyDate>2009-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2010-01-01</AnyDate>
</EndDate>
</Association>
<Association>
<Name>UNIVERSITY AND BNL LABORATORY SERVICE  Member, Graduate Program in Biochemistry and Structural Biology</Name>
<StartDate>
<AnyDate>2003-01-01</AnyDate>
</StartDate>
<Role><Name>Member</Name></Role>
</Association>
<Association>
<Name>Member, Brookhaven Lecture Committee</Name>
<StartDate>
<AnyDate>2005-01-01</AnyDate>
</StartDate>
<EndDate>
<AnyDate>2010-01-01</AnyDate>
</EndDate>
<Role><Name>Member</Name></Role>
</Association>
<Association>
<Name>Member, Graduate Program in Molecular Genetics and Microbiology</Name>
<StartDate>
<AnyDate>2005-01-01</AnyDate>
</StartDate>
<Role><Name>Member</Name></Role>
</Association>
<Association>
<Name>Stony Brook Graduate School Ph.D.</Name>
</Association>
<Association>
<Name>Candidate Interview Team (traveled to China</Name>
</Association>
<Association>
<Name>for 2 weeks).</Name>
</Association>
<Association>
<Name>Search committee member for TEM group leader position in Center for Functional</Name>
<Role><Name>Member</Name></Role>
</Association>
<Association>
<Name>Nanomaterials, Brookhaven National Laboratory</Name>
</Association>
</Associations>
</StructuredXMLResume>
<NonXMLResume>
<TextResume></TextResume>
</NonXMLResume>
</Resume>
<processingErrors>
<Error id="2914131306521">
<ErrorCode></ErrorCode>
<ErrorMessage></ErrorMessage>
</Error>
</processingErrors>
</HireAbilityXMLResults>
</Results>
