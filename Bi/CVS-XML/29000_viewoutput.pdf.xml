<?xml version="1.0" encoding="UTF-8"?>
<!--  [xml content created: 3-12-2013 @ 16:03:23 EDT] -->
<Results>
<HireAbilityXMLResults id="2910450306521"  usageLimitType="allocation" usageLimit="200" currentUsage="83" remainingUsage="117" accountValidThrough="03-18-2013">
<Resume xml:lang="EN" xmlns="http://ns.hr-xml.org/2007-04-15" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://ns.hr-xml.org/2_5/HR-XML-2_5/SEP/Resume.xsd">
<ResumeId>
<IdValue></IdValue>
</ResumeId>
<StructuredXMLResume>
<ContactInfo>
<PersonName>
<FormattedName>French East</FormattedName>
<GivenName>French</GivenName>
<FamilyName>East</FamilyName>
</PersonName>
<ContactMethod>
<PostalAddress>
<CountryCode>UN</CountryCode>
<Municipality>Peer</Municipality>
<DeliveryAddress>
<AddressLine>204 + xi)</AddressLine>
</DeliveryAddress>
</PostalAddress>
</ContactMethod>
<ContactMethod>
<Use>personal</Use>
<Location>home</Location>
<WhenAvailable>unknown</WhenAvailable>
<Telephone>
<FormattedNumber>+1 (513) 556-4074</FormattedNumber>
<InternationalCountryCode>1</InternationalCountryCode>
<AreaCityCode>513</AreaCityCode>
<SubscriberNumber>556-4074</SubscriberNumber>
</Telephone>
</ContactMethod>
<ContactMethod>
<InternetEmailAddress>chalklr@ucmail.uc.edu</InternetEmailAddress>
</ContactMethod>
<ContactMethod>
<InternetWebAddress>http://math.uc.edu/~chalklr/</InternetWebAddress>
</ContactMethod>
</ContactInfo>
<ExecutiveSummary>Professional Summary Since 1957, my research interests have been concerned mainly with ordinary differential equations having meromorphic coefficients on a region of the complex plane. During the last 25 years, the principal objects of my study have been relative invariants associated with particular kinds of differential equations. A relative invariant is a differential polynomial into which coefficients of differential equations can be substituted to exhibit invariant properties of equations under the two general types of transformations. Thus, the subject can be viewed as a very interesting area of differential algebra that has had only one recent explorer. Were it not for the guidance provided by computer-generated examples, the number of current explorers would likely be zero.</ExecutiveSummary>
<EducationHistory>
<SchoolOrInstitution schoolType="university">
<School>
<SchoolName>Institution: University of Cincinnati</SchoolName>
</School>
<PostalAddress>
<CountryCode>UN</CountryCode>
<PostalCode>45221</PostalCode>
<Region>Ohio</Region>
<Municipality>Cincinnati</Municipality>
</PostalAddress>
<Degree degreeType="doctoral">
<DegreeName>Ph.D</DegreeName>
<DegreeDate>
<AnyDate>1958-01-01</AnyDate>
</DegreeDate>
<DegreeMajor>
<Name>Mathematics</Name>
</DegreeMajor>
</Degree>
</SchoolOrInstitution>
<SchoolOrInstitution schoolType="">
<School>
<SchoolName>them immediately to the software engineers at Wolfram Inc.</SchoolName>
</School>
<Degree degreeType="doctoral">
<DegreeMajor>
<Name>They are significant bugs and I</Name>
</DegreeMajor>
</Degree>
</SchoolOrInstitution>
</EducationHistory>
<PublicationHistory>
<Article>
<Title>Basic Global Relative Invariants for Nonlinear Differential Equations</Title>
<Name role="author">
<FormattedName>Abbrev Book Roger Chalkley</FormattedName>
</Name>
<PublicationDate>
<StringDate>2007</StringDate>
</PublicationDate>
</Article>
</PublicationHistory>
<Qualifications>
<Competency name = "Differential Equations">
<CompetencyEvidence name ="Differential Equations">
<NumericValue description="Range in years of experience">1</NumericValue>
</CompetencyEvidence>
</Competency>
</Qualifications>
<Associations>
<Association>
<Name>Memoir of the American Mathematical Society Number 744 titled &quot;Basic Global Relative</Name>
</Association>
<Association>
<Name>Memoir of the American Mathematical Society Number 888 titled &quot;Basic Global Relative</Name>
</Association>
</Associations>
</StructuredXMLResume>
<NonXMLResume>
<TextResume></TextResume>
</NonXMLResume>
</Resume>
<processingErrors>
<Error id="2910450306521">
<ErrorCode></ErrorCode>
<ErrorMessage></ErrorMessage>
</Error>
</processingErrors>
</HireAbilityXMLResults>
</Results>
